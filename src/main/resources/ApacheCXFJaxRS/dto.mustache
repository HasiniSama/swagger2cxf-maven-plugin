{{{licenseHeaderJava}}}

package {{package}};

{{#imports}}import {{import}};
{{/imports}}
import io.swagger.annotations.*;
import com.fasterxml.jackson.annotation.*;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Pattern;
{{#models}}
{{#model}}{{#description}}
    /**
    * {{description}}
    **/{{/description}}
{{#discriminator}}@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.EXISTING_PROPERTY, property = "{{discriminator}}", visible = true)
    @JsonSubTypes({
    {{#vendorExtensions.x-wso2-subtypes}}
        @JsonSubTypes.Type(value = {{package}}.{{.}}DTO.class, name = "{{.}}"),
    {{/vendorExtensions.x-wso2-subtypes}}
    })
{{/discriminator}}
@ApiModel(description = "{{{description}}}")
{{#vendorExtensions.x-wso2-json-ignore-unknown}}@JsonIgnoreProperties(ignoreUnknown = true){{/vendorExtensions.x-wso2-json-ignore-unknown}}
public class {{classname}}{{#parent}} extends {{{parent}}}{{/parent}} {
{{#vars}}{{#isEnum}}
    public enum {{datatypeWithEnum}} {
        {{#allowableValues}}{{#values}} {{.}}, {{/values}}{{/allowableValues}}
    };
    @Valid {{#required}}
    @NotNull(message = "Property {{{name}}} cannot be null.") {{/required}}{{#pattern}}
    @Pattern(regexp="{{{pattern}}}", message = "Property {{{name}}} does not conform to {{{pattern}}} pattern."){{/pattern}}
    private {{{datatypeWithEnum}}} {{name}} = {{{defaultValue}}};{{/isEnum}}{{^isEnum}}
    @Valid {{#required}}
    @NotNull(message = "Property {{{name}}} cannot be null.") {{/required}}{{#pattern}}
    @Pattern(regexp="{{{pattern}}}", message = "Property {{{name}}} does not conform to {{{pattern}}} pattern."){{/pattern}}
    private {{{datatype}}} {{name}} = {{{defaultValue}}};{{/isEnum}}
{{/vars}}

{{#vars}}
    /**{{#description}}
    * {{{description}}}{{/description}}{{#minimum}}
    * minimum: {{minimum}}{{/minimum}}{{#maximum}}
    * maximum: {{maximum}}{{/maximum}}
    **/
    @ApiModelProperty({{#required}}required = {{required}}, {{/required}}value = "{{{description}}}")
    @JsonProperty("{{name}}")
    public {{{datatypeWithEnum}}} {{getter}}() {
        return {{name}};
    }
    public void {{setter}}({{{datatypeWithEnum}}} {{name}}) {
        this.{{name}} = {{name}};
    }

{{/vars}}
    @Override
    public String toString() {

        StringBuilder sb = new StringBuilder();
        sb.append("class {{classname}} {\n");
        {{#parent}}sb.append("  " + super.toString()).append("\n");
        {{/parent}}
        {{#vars}}sb.append("    {{name}}: ").append({{name}}).append("\n");
        {{/vars}}
        sb.append("}\n");
        return sb.toString();
    }
}
{{/model}}
{{/models}}
